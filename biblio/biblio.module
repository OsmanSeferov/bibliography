<?php

/*
 * @ Biblio module file
 */

/**
 * Implementation of hook_menu().
 */
function biblio_menu() {

  $items['biblio/autocomplete'] = array(
    'page callback' => 'biblio_autocomplete',
    'access arguments' => array('create article content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/biblio'] = array(
    'title' => 'Bibliography settings',
    'description' => 'Configure Bibliography.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('biblio_settings_form'),
    'access arguments' => array('create article content'),
    'file' => 'biblio.admin.inc',
  );

  $items['biblio/create_term'] = array(
    'page callback' => 'biblio_ajax_create_term',
    'access arguments' => array('create article content'),
    'type' => MENU_CALLBACK,
  );

  $items['biblio/get_term'] = array(
    'page callback' => 'biblio_ajax_get_term',
    'access arguments' => array('create article content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter();
 * @param type $form
 * @param type $form_state
 * @param type $form_id
 */
function biblio_form_node_form_alter(&$form, &$form_state, $form_id) {
  global $language;
  $default_language = language_default(NULL);
  $lang = FALSE;
  if ($language->language != $default_language->language) {
    $lang = TRUE;
  }
  drupal_add_js(array(
    'biblio' => array(
      'module_path' => base_path() . drupal_get_path('module', 'biblio'),
      'language' => $lang ? '/' . $language->language : '',
      'autocomplete_path' => url('biblio/autocomplete'),
      )), 'setting'
  );

  drupal_add_js(drupal_get_path('module', 'biblio') . '/biblio_ac.js');
}

/**
 * Implements hook_theme();
 */
function biblio_theme() {
  $theme = array();

// Bibliography page.
  $theme['biblio_panel'] = array(
    'variables' => array(
      'data' => array(),
      'arguments' => array(),
    ),
    'template' => 'theme/biblio-panel'
  );

  return $theme;
}

/**
 * Callback function
 */
function biblio_ajax_create_term() {

  if (!isset($_POST['text'])) {
    drupal_access_denied();
  }

  if (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {
    $footnote = $_POST['text'];
    $vocabulary = taxonomy_vocabulary_machine_name_load('bibliography');
    $term = new stdClass();
    $term->name = jj_common_trim($footnote, FALSE, 120);
    $term->vid = $vocabulary->vid;
    $term->description = $footnote;
    taxonomy_term_save($term);
    drupal_json_output($term->tid);
  }
}

/**
 * Callback function
 */
function biblio_ajax_get_term() {

  if (!isset($_POST['tid'])) {
    drupal_access_denied();
  }

  if (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {
    $tid = $_POST['tid'];
    $term = taxonomy_term_load($tid);
    $desc = $term->description;
    drupal_json_output($desc . ' tid:' . $tid);
  }
}

/**
 * Callbacjk function for autocomplete suggestions
 * 
 * @param type $string
 */
function biblio_autocomplete($string = '') {
  $matches = array();

  if (!$string && isset($_POST['search'])) {
    $string = $_POST['search'];
  }

  $vocabularies = array_keys(array_filter(variable_get('biblio_autocomplete_vocabularies', array())));

  if (count($vocabularies)) {
    $query = db_select('taxonomy_term_data', 't')
        ->fields('t', array('tid', 'description'))
        ->condition('t.description', '%' . db_like($string) . '%', 'LIKE')
        ->orderBy('t.description')
        ->range(0, variable_get('footnote_limit', 2))
        ->addTag('term_access');
    $query->condition('t.vid', $vocabularies, 'IN');
    $result = $query->execute();

    foreach ($result as $term) {
      $body = strip_tags($term->description);
      $matches[$body . ' tid:' . $term->tid . ' '] = $body;
    }
  }
  drupal_json_output($matches);
}

/**
 * Implements hook_node_view();
 */
function biblio_node_view($node, $view_mode, $langcode) {

  $filtered_map = _biblio_get_field_map($node);

  foreach ($filtered_map as $field_name => $data) {
    if (isset($node->{$field_name}[LANGUAGE_NONE][0]['value'])) {
      $body = $node->{$field_name}[LANGUAGE_NONE][0]['value'];
      if (!empty($body)) {
        $data = array('node' => $node);
        $node->{$field_name}[LANGUAGE_NONE][0]['value'] = token_replace($body, $data);
      }
    }
  }
}

/**
 * Implements hook_node_presave();
 * @param type $node
 */
function biblio_node_presave($node) {
  cache_clear_all('biblio_' . $node->nid, 'cache');
  biblio_update_terms_data($node);
}

/**
 * Implements hook_node_insert();
 * @param type $node
 */
function biblio_node_insert($node) {
  cache_clear_all('biblio_' . $node->nid, 'cache');
  biblio_update_terms_data($node);
  _biblio_create_bibliography_path($node);
}

/**
 * Helper function that insert/update  section id field of term (footnote)
 * depends on content-type
 */
function biblio_update_terms_data($node) {

  $node_wrapper = entity_metadata_wrapper('node', $node);
  $filtered_map = _biblio_get_field_map($node);

  $tids = array();
  $nids = array();

  foreach ($filtered_map as $field_name => $data) {
    if (isset($node_wrapper->{$field_name})) {
      $body = $node_wrapper->{$field_name}->value();
      if (is_array($body)) {
        $body = (isset($body['value'])) ? $body['value'] : '';
      }

      $pattern = "/data-biblio-tid=\"(\d+)/";
      preg_match_all($pattern, $body, $matches);
      if ($matches && !empty($matches[1])) {
        $tids = array_unique($matches[1]);
      }
    }
  }

  foreach ($tids as $tid) {
    if (!$term = taxonomy_term_load($tid)) {
      continue;
    }

    $term_wrapper = entity_metadata_wrapper('taxonomy_term', $term);

    if (!empty($term_wrapper->field_biblio_node_id)) {
      $nids = $term_wrapper->field_biblio_node_id->value();
      if (!in_array($node->nid, $nids)) {
        $term->field_biblio_node_id[LANGUAGE_NONE][] = array('value' => (int) $node->nid);
        taxonomy_term_save($term);
      }
    }
    else {
      $term->field_biblio_node_id[LANGUAGE_NONE][] = array('value' => (int) $node->nid);
      taxonomy_term_save($term);
    }
  }
}

/**
 * Implements hook_node_delete();
 * @param type $node
 */
function biblio_node_delete($node) {
  //Delete  bibliography cache
  biblio_clear_cache($node);
  //Delete path alias 
  biblio_delete_path_alias($node, 'bibliography');
}

/**
 * Helper function that drops bibliography caches based on node type
 */
function biblio_clear_cache($node) {
  $cache_name = 'biblio_' . $node->nid;
  cache_clear_all($cache_name, 'cache', TRUE);
}

/**
 * Helper function return path to section
 * Creates if nort exists path alias
 * @param type $sid
 * @return type
 */
function _biblio_create_bibliography_path($node) {

  $static_aliases = &drupal_static(__FUNCTION__);

  if (empty($static_aliases[$node->nid])) {
    global $base_path;
    global $language;
    $default_language = language_default(NULL);
    $lang = '';
    if (isset($language->language) && isset($default_language->language) && $language->language != $default_language->language) {
      $lang = $language->language . '/';
    }

    $node_lang = isset($node->language) ? $node->language : LANGUAGE_NONE;
    $suffix_lang = ($node_lang == LANGUAGE_NONE) ? $default_language->language : $node_lang;
    $biblio_suffix = variable_get('biblio_' . $suffix_lang . '_url_suffix', 'bibliography');

    $url = drupal_lookup_path('alias', 'node/' . $node->nid . '/' . $biblio_suffix, $node->language);

    if (!$url) {
      // Check if module pathauto enabled.
      if (module_exists('pathauto')) {
        $source = 'node/' . $node->nid . '/' . $biblio_suffix;
        module_load_include('inc', 'pathauto');

        // Get alias if exists.
        $node_alias = _pathauto_existing_alias_data('node/' . $node->nid, $node_lang);
        if (!$node_alias['alias']) {
          $node_alias['alias'] = pathauto_cleanstring($node->title);
        }

        $alias = $node_alias['alias'] . '/' . $biblio_suffix;
        $alias = pathauto_clean_alias($alias);
        // Build the new path alias array and send it off to be created.
        $path = array(
          'source' => $source,
          'alias' => $alias,
          'language' => $node_lang,
        );
        path_save($path);
      }
      else {
        $alias = "node/$node->nid/$biblio_suffix";
      }
    }
    $alias = $url;
    $static_aliases[$node->nid] = (string) $base_path . $lang . $alias;
  }
  return $static_aliases[$node->nid];
}

/**
 * Function return footnotes in section
 * @param type $sid
 * @return type
 */
function biblio_get_node_footnotes($node) {
  $cache = cache_get('biblio_' . $node->nid);
  $cache = !empty($cache) ? $cache->data : FALSE;

  if (!empty($cache)) {
    return $cache;
  }

  // Get footnotes.
  $view = views_get_view_result('bibliography', $node->nid);
  $terms_body = array();
  $count = 1;
  foreach ($view as $term_data) {
    $terms_body[$term_data->tid]['data'] = t(strip_tags($term_data->taxonomy_term_data_description));
    $terms_body[$term_data->tid]['footnote_id'] = $count;
    $count++;
  }
  cache_set('biblio_' . $node->nid, $terms_body);

  return $terms_body;
}

/**
 * Function returns all textarea fields names
 * @param type $node
 * @return type
 */
function _biblio_get_field_map($node) {
  $cache = _field_info_field_cache();
  $map = $cache->getFieldMap();
  $allinstances = $cache->getInstances('node');
  $instances = $cache->getBundleInstances('node', $node->type);
  $filtered_bundle = array_intersect_key($map, $instances);
  $filtered_map = array_filter($filtered_bundle, '_biblio_textarea_filter');

  return $filtered_map;
}

/**
 * Callback function for array_filter();
 * @param type $nid
 */
function _biblio_textarea_filter($item) {
  return (isset($item['type']) && ($item['type'] == 'text_with_summary' || $item['type'] == 'text_long'));
}

/**
 * Helper function that delete path alias if not exist
 * @param object $node
 * @param string $fragment
 */
function biblio_delete_path_alias($node, $fragment) {

  $url = drupal_lookup_path('alias', 'node/' . $node->nid . '/' . $fragment, $node->language);

  if ($url) {
    $source = 'node/' . $node->nid . '/' . $fragment;
    $query = db_select('url_alias', 'ua');
    $result = $query->fields('ua')
        ->condition('source', $source, '=')
        ->execute();
    $data = $result->fetchAssoc();
    // Check if module pathauto enabled.
    if (module_exists('pathauto')) {
      path_delete($data['pid']);
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function biblio_ctools_plugin_directory($owner, $plugin_type) {
  switch ($owner) {
    case 'ctools':
      if (in_array($plugin_type, array('content_types', 'contexts', 'access'))) {
        return 'plugins/' . $plugin_type;
      }
      break;
    case 'panels':
      if (in_array($plugin_type, array('layouts'))) {
        return 'plugins/' . $plugin_type;
      }
      break;
  }
}

/**
 * Implements hook_ckeditor_plugin().
 */
function biblio_ckeditor_plugin() {
  return array(
    'biblio' => array(
      'name' => 'biblio',
      'desc' => t('Bibliography - A plugin to easily create footnotes'),
      'path' => drupal_get_path('module', 'biblio') . '/plugins/ckeditor/biblio/',
    )
  );
}

